{"ast":null,"code":"import { toast } from 'react-toastify';\nconst initState = {\n  products: [],\n  totalPrice: 0,\n  totalQuantities: 0\n};\n\nconst CartReducer = (state = initState, action) => {\n  let findPro;\n  let index;\n\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      const {\n        product,\n        quantity\n      } = action.payload;\n      const check = state.products.find(pr => pr.id === product.id);\n\n      if (check) {\n        toast.info('this product is already in your cart', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          progress: undefined\n        });\n        return state;\n      } else {\n        const Tprice = state.totalPrice + product.productPrice * quantity;\n        const Tquantities = state.totalQuantities + quantity;\n        product.quantity = quantity;\n        return { ...state,\n          products: [...state.products, product],\n          totalPrice: Tprice,\n          totalQuantities: Tquantities\n        };\n      }\n\n    case 'INC':\n      findPro = state.products.find(product => product.id === action.payload);\n      index = state.products.findIndex(product => product.id === action.payload);\n      findPro.quantity += 1;\n      state.products[index] = findPro;\n      return { ...state,\n        totalPrice: state.totalPrice + findPro.productPrice,\n        totalQuantities: state.totalQuantities + 1\n      };\n\n    case \"DEC\":\n      findPro = state.products.find(product => product.id === action.payload);\n      index = state.products.findIndex(product => product.id === action.payload);\n\n      if (findPro.quantity > 1) {\n        findPro.quantity -= 1;\n        state.products[index] = findPro;\n        return { ...state,\n          totalPrice: state.totalPrice - findPro.productPricee,\n          totalQuantities: state.totalQuantities - 1\n        };\n      } else {\n        return state;\n      }\n\n    case 'REMOVE':\n      findPro = state.products.find(product => product.id === action.payload);\n      const filtered = state.products.filter(product => product.id !== action.payload);\n      return { ...state,\n        products: filtered,\n        totalPrice: state.totalPrice - findPro.productPrice * findPro.quantity,\n        totalQuantities: state.totalQuantities - findPro.quantity\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = CartReducer;\nexport default CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/DATN-CNTT/src/store/reducers/CartReducer.js"],"names":["toast","initState","products","totalPrice","totalQuantities","CartReducer","state","action","findPro","index","type","product","quantity","payload","check","find","pr","id","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Tprice","productPrice","Tquantities","findIndex","productPricee","filtered","filter"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\nconst initState = {\n    products: [],\n    totalPrice: 0,\n    totalQuantities: 0\n}\n\nconst CartReducer = (state = initState, action) => {\n    let findPro;\n    let index;\n    switch(action.type){\n        case 'ADD_TO_CART':\n        const {product,quantity} = action.payload;\n        const check = state.products.find(pr => pr.id === product.id);\n        if(check){\n            toast.info('this product is already in your cart', {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: false,\n                draggable: false,\n                progress: undefined,\n            });\n            return state;\n        } else {\n            const Tprice = state.totalPrice + product.productPrice * quantity;\n            const Tquantities = state.totalQuantities + quantity;\n            product.quantity = quantity;\n            return {\n                ...state, products: [...state.products, product],totalPrice: Tprice, totalQuantities: Tquantities \n            }\n\n        }\n        case 'INC':\n          findPro = state.products.find(product => product.id === action.payload);\n          index = state.products.findIndex(product => product.id === action.payload);\n          findPro.quantity += 1;\n          state.products[index] = findPro;\n          return {\n              ...state,\n              totalPrice: state.totalPrice + findPro.productPrice, totalQuantities: state.totalQuantities+1\n          }\n        case \"DEC\":\n        findPro = state.products.find(product => product.id === action.payload);\n        index = state.products.findIndex(product => product.id === action.payload);\n        if(findPro.quantity > 1){\n           findPro.quantity -= 1;\n           state.products[index] = findPro;\n           return {\n               ...state,\n               totalPrice: state.totalPrice - findPro.productPricee, totalQuantities: state.totalQuantities - 1\n           }\n        } else {\n            return state;\n        }\n        case 'REMOVE':\n        findPro = state.products.find(product => product.id === action.payload);\n        const filtered = state.products.filter(product => product.id !== action.payload);\n        return {\n            ...state,\n            products: filtered,\n            totalPrice: state.totalPrice - findPro.productPrice * findPro.quantity, totalQuantities: state.totalQuantities - findPro.quantity\n        }\n        default: \n        return state;\n    }\n\n}\nexport default CartReducer;"]},"metadata":{},"sourceType":"module"}